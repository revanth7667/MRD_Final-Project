---
title: "Los Angeles Crime Analysis"
author: 
format: pdf
editor: visual
echo: FALSE
output: FALSE
geometry: margin = 1.0cm
---

```{r}
#Load all the required packages and libraries
library(AER)
library(car)
library(caret)
library(caTools)
#library(corrplot)
#library(cvms)
library(dplyr)
library(geosphere)
#library(ggmap)
library(ggplot2)
#library(ggpubr)
library(gridExtra)
library(gtsummary)
#library(knitr)
#library(leaflet)
library(lubridate)
#library(maps)
library(Metrics)
#library(openintro)
library(pROC)
#library(purrr)
#library(stargazer)
#library(stringr)
library(tidyverse)

# Resolve package conflicts
#library(conflicted)
#conflict_prefer("filter", "dplyr")
#conflict_prefer("lag", "dplyr")
```

```{r}
#Load the data
df_precinct <- read.csv("../data/Precinct_Location.csv")
df <- read.csv('/Users/revanth/Documents/MIDS/Semester 1/MRD/Group Project/Datasets/crime.csv') #change this path later
```

```{r}
str(df)
```

```{r}
#Date Related Cleanings
#Clean the Data Columns and create difference
df$DATE.OCC <- substr(df$DATE.OCC,1,10) 
df$DATE.OCC <- as.Date(df$DATE.OCC, "%m/%d/%Y")

df$Date.Rptd <- substr(df$Date.Rptd,1,10) 
df$Date.Rptd <- as.Date(df$Date.Rptd, "%m/%d/%Y")

df$rpt_diff <- df$Date.Rptd- df$DATE.OCC
```

Important Step here, Adjust if required:

```{r}
#Dropping data after Sept-2023 as this may give outlier as seen during EDA, adjust to Oct-01 if required
df <- df[df$DATE.OCC < as.Date("09/01/2023", "%m/%d/%Y"), ]
```

```{r}
#Calculate Year, Month and Day
df$dt_year = format(df$DATE.OCC,"%Y")
df$dt_month = as.factor(format(df$DATE.OCC,"%m"))
df$dt_day = format(df$DATE.OCC,"%d")
df$dt_weekday <- as.factor(wday(df$DATE.OCC, label=TRUE))
```

```{r}
#Calculate Distance to Precinct in Miles
df <- df %>% left_join( df_precinct[,c("precinct_code","precinct_lat","precinct_long")], 
        by=c('AREA'='precinct_code'))

df$dist_to_precinct <- distHaversine(df[,c("LON","LAT")],df[,c("precinct_long","precinct_lat")])*0.00062137
```

```{r}
#create text column for crime_type
df$crime_type <- as.factor(ifelse(df$Part.1.2==1,"serious","non-serious"))
```

```{r}
#clean time 
df$time_hr <- as.integer(substr(str_pad(as.character(df$TIME.OCC),4,pad=0),1,2))
```

```{r}
#create binary column if weapon is involved
df$weapons_binary <- as.factor(ifelse(is.na(df$Weapon.Used.Cd) | (df$Weapon.Used.Cd==""),0,1))
```

```{r}
#Performing the following Cleanings as per Suim's Logistic Regression requirements

#Cleaning Descent
df$Vict.Descent[df$Vict.Descent == ""] <- "X"
df$Vict.Descent[df$Vict.Descent == "-"] <- "X"
df$Vict.Descent <- as.factor(df$Vict.Descent)

#Cleaning Gender 
df$Vict.Sex[df$Vict.Sex == ""] <- "X"
df$Vict.Sex[df$Vict.Sex == "-"] <- "X"
df$Vict.Sex <- as.factor(df$Vict.Sex)
```

## EDA

```{r}
ggplot(df, aes(x = crime_type, fill = crime_type)) +
  geom_bar() +
  labs(title = "Distribution of Crime Types", x = "Crime Types", y = "Count") +
  geom_text(aes(label = after_stat(count)), stat = "count", vjust = 1.5) +   # Adjusted the vertical position of the text
  #scale_fill_manual(values = c("non-serious" = "#88DD88", "serious" = "#FF6666")) +  # Dimmed shades of green and red
  theme(legend.position = "none",      # Remove the legend
        plot.title = element_text(hjust = 0.5))  # Center the title
```

```{r}
daily_crime_count <- df %>%
  group_by(DATE.OCC) %>%
  summarize(Count = n()) %>%
  arrange(DATE.OCC)

# Calculate the average value
avg_value <- mean(daily_crime_count$Count)

ggplot(data = daily_crime_count, aes(x = DATE.OCC, y = Count)) +
  geom_line(color = "#4A90E2") +  
  labs(title = "Daily Crime Counts", x = "Date The Crime Occurred", y = "Count") +
  geom_hline(yintercept = avg_value, linetype = "dashed", color = "red") +
  geom_text(aes(x = max(DATE.OCC), y = avg_value + max(Count) * 0.02, 
                label = paste("Average:", round(avg_value, 0))), 
            color = "red", hjust = 0.78) +
  theme(legend.position = "none",      
        plot.title = element_text(hjust = 0.5),   
        axis.title.x = element_text(size=12), 
        axis.title.y = element_text(size=12))
```

```{r}
#Time, Day and Month
q1 <- ggplot(df, aes(x=time_hr, fill=crime_type))+
  geom_histogram(binwidth = 1, position="dodge", alpha=0.7)+
  labs(title = NULL, x = "Time of Day (24-Hour)", y = "Count") +
  scale_fill_discrete(name="Crime Type")  # Set legend title

q2 <- ggplot(df, aes(x=dt_weekday, fill=crime_type))+
  geom_bar(position="dodge")+
  labs(title = NULL, x = "Weekday", y = "Count") +
  theme(legend.position="none")

q3 <- filter(df, dt_year != 2023) %>%
  ggplot(aes(x=dt_month, fill=crime_type))+
  geom_bar(position="dodge")+
  labs(title = NULL, x = "Month", y = 'Count')+
  theme(legend.position="none")
```

```{r}
# Adjust the plot margins
margin_adjustment <- theme(plot.margin = margin(5, 5, 5, 5, "pt"))
q1 <- q1 + margin_adjustment
q2 <- q2 + margin_adjustment
q3 <- q3 + margin_adjustment

# Define a layout matrix
# The numbers in the matrix correspond to the plots:
# 1 = q3, 2 = q2, 3 = q1
# The layout matrix arranges q3 and q2 side by side in the first row,
# and q1 (stretched) in the second row.
layout_matrix <- rbind(c(1, 2),
                      c(3, 3)) # Stretching q1 across the width of the grid

# Combine the plots using the custom layout
grid.arrange(q3, q2, q1, layout_matrix = layout_matrix, 
             top="Crime Distribution by Month, Weekday, and Time of Day")
```

```{r}
# First plot
p1 <- ggplot(df, aes(x = AREA.NAME, fill = crime_type)) +
  geom_bar(position = "dodge", alpha = 0.7) +
  labs(x = "Precinct", y = "Count", fill = "Crime Type") +  # Removed title to avoid duplication
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))  # Rotate x-axis labels

# Second plot
p2 <- df %>% filter(dist_to_precinct < 10) %>%
  ggplot(aes(x = dist_to_precinct, fill = crime_type)) +
  geom_histogram(binwidth = 1, position = "dodge", alpha = 0.7) +
  labs(x = "Distance (in miles)", y = "Count", fill = "Crime Type")  # Removed title to avoid duplication

# Combine the two plots with a single title
grid.arrange(p1, p2, ncol = 1, top = "Crime Count and Distance to Precinct")
```

```{r}
# Assign plots to variables
p1 <- ggplot(df, aes(x = Vict.Age, fill = as.factor(crime_type))) +
  geom_histogram(binwidth = 10, position = "dodge", color = "black") +
  labs(title = NULL, 
       x = "Age", 
       y = "Count", 
       fill = "Crime Type") +
  theme(legend.position="none")

p2 <- ggplot(df, aes(x = Vict.Sex, fill = as.factor(crime_type))) +
  geom_bar(position = "dodge", color = "black") +
  labs(title = NULL, 
       x = "Sex", 
       y = "Count") +  # Removed the fill legend title
  theme_minimal() +
  theme(legend.position="none")  # Remove the legend

p3 <- ggplot(df, aes(x = Vict.Descent, fill = as.factor(crime_type))) +
  geom_bar(position = "dodge", color = "black") +
  labs(title = NULL, 
       x = "Descent", 
       y = "Count", 
       fill = "Crime Type") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability

# Adjust the plot margins
margin_adjustment <- theme(plot.margin = margin(5, 5, 5, 5, "pt"))
p1 <- p1 + margin_adjustment
p2 <- p2 + margin_adjustment
p3 <- p3 + margin_adjustment

# Define a layout matrix similar to the previous one, but for the new plots
# 1 = p1, 2 = p2, 3 = p3
# The layout matrix arranges p1 and p2 side by side in the first row,
# and p3 (stretched) in the second row.
layout_matrix_new <- rbind(c(1, 2),
                           c(3, 3)) # Stretching p3 across the width of the grid

# Use grid.arrange to display the plots with the custom layout
grid.arrange(p1, p2, p3, layout_matrix = layout_matrix_new, 
             top="Distribution by Victim Age, Sex, and Descent")
```

```{r}
str(df)
```

```{r}
#Creating a Clean Df only the columsn which will be used ahead

#list of columns to keep
column_keep <- c("crime_type","time_hr", "Vict.Age", "Vict.Sex", "Vict.Descent", "dist_to_precinct", "weapons_binary", "AREA.NAME", "dt_weekday", "dt_month")

#create new df with these columns
df2 <- df[,names(df) %in% column_keep]

str(df2)
```

## Model 1 : Logistic

```{r}
#creating dataframe for logistic regression
df_logi <- df2[,!names(df2) %in% c("AREA.NAME", "dt_weekday", "dt_month")]
str(df_logi)
```

```{r}
model_logi <- glm(crime_type ~ ., data=df_logi, family="binomial")
```

```{r}
summary(model_logi)
```

```{r}
exp(coef(model_logi))
```

```{r}
model_logi_1 <- glm(crime_type ~ time_hr + Vict.Age + Vict.Sex + dist_to_precinct + weapons_binary, family = "binomial", data = df_logi)
```

```{r}
model_logi_2 <- glm(crime_type ~ time_hr + Vict.Age + dist_to_precinct + weapons_binary, family = "binomial", data = df_logi)
```

```{r}
summary(model_logi_1)
```

```{r}
summary(model_logi_2)
```

```{r}
model_logi_interaction <- glm(crime_type ~ time_hr + Vict.Age + Vict.Sex + Vict.Descent + Vict.Sex * Vict.Descent + dist_to_precinct + weapons_binary, family = "binomial", data = df_logi)
```

```{r}
summary(model_logi_interaction)
```

```{r}
deviance_value <- deviance(model_logi)
deviance_value_1 <- deviance(model_logi_1)
deviance_value_2 <- deviance(model_logi_2)
deviance_value
deviance_value_1
deviance_value_2
```

```{r}
aic_value_base <- AIC(model_logi)
aic_value_alt_1 <- AIC(model_logi_1)
aic_value_alt_2 <- AIC(model_logi_2)
aic_value_base
aic_value_alt_1
aic_value_alt_2
```

```{r}
null_model <- glm(crime_type ~ 1, data = df_logi, family = "binomial")
null_deviance <- deviance(null_model)
model_deviance <- deviance(model_logi)
mcfaddens_pseudo_r2 <- 1 - (model_deviance / null_deviance)
mcfaddens_pseudo_r2
```

```{r}
roc_plot = roc(factor(df_logi$crime_type), fitted(model_logi))

# basic ROC plot
plot(roc_plot, main = "ROC Curve")

# calculate threshold
coords <- coords(roc_plot, "best")

# add  threshold and AOC value
text(x = coords$specificity, y = coords$sensitivity, labels = paste("Threshold:", coords$threshold), pos = 4, cex = 0.8)
text(x = coords$specificity, y = coords$sensitivity, labels = paste("AUC:", round(auc(roc_plot), 2)), pos = 2, cex = 0.8)
```

```{r}
predicted_probabilities <- fitted(model_logi)
predicted_classes <- ifelse(predicted_probabilities > 0.616, "1", "0")
```

```{r}
crime_type_numeric <- as.numeric(factor(df_logi$crime_type, levels = c("non-serious", "serious"))) - 1
```

```{r}
crime_type_factor <- factor(crime_type_numeric, levels = c("0", "1"))
predicted_factor <- factor(predicted_classes, levels = c("0", "1"))
```

```{r}
conf_matrix <- confusionMatrix(predicted_factor, crime_type_factor, positive = "1")
conf_matrix
```

do we require the below part? doesn't seem to be used, keeping it commented out

```{r}
#california_map <- map_data("county", "california")
```

Assesment

```{r}
vif(model_logi)
```

```{r}
roc_plot = roc(df_logi$crime_type, fitted(model_logi))

# basic ROC plot
plot(roc_plot, main = "ROC Curve")

# calculate threshold
coords <- coords(roc_plot, "best")

# add  threshold and AOC value
text(x = coords$specificity, y = coords$sensitivity, labels = paste("Threshold:", coords$threshold), pos = 4, cex = 0.8)
text(x = coords$specificity, y = coords$sensitivity, labels = paste("AUC:", round(auc(roc_plot), 2)), pos = 2, cex = 0.8)
```

```{r}
df_logi$predprobs <- predict(model_logi, type = "response")
plot(df_logi$predprobs, xlab = "Observations", ylab = "Predicted Probability", main = "Predicted Probabilities")
```

## Model 2 : Poisson

```{r}
df_pois <- df2[,names(df2) %in% c("AREA.NAME", "dt_weekday","dt_month") ]
str(df_pois)
```

```{r}
df_daily <- df_pois %>%
  group_by(dt_weekday,dt_month,AREA.NAME)%>%
  summarise(count = n())
```

We can skip the below part since we have a similar plot in the EDA section, moght help save space

```{r}
#| fig-width: 5.5
#| fig-height: 2
library(gridExtra)
library(ggplot2)
library(dplyr)

# Create the histogram plot
p1 <- ggplot(df_daily, aes(x = count, y = ..density..)) +
  geom_histogram(binwidth = 1, fill = "blue", color = "black") +
  labs(title = "Crime Counts (Proportions)",
       x = "Crime Count",
       y = "Proportion") +
  theme_minimal()

# Aggregate counts by weekday across all areas and months
weekday_counts <- df_daily %>%
  group_by(dt_weekday) %>%
  summarise(total_count = sum(count))

# Create the bar chart for weekday counts
p2 <- ggplot(weekday_counts, aes(x = dt_weekday, y = total_count, fill = dt_weekday)) +
  geom_bar(stat = "identity") +
  labs(title = "Crime Counts Weekday",
       x = "Day of the Week",
       y = "Total Count Crimes") +
  theme_minimal() +
  theme(legend.position = "none")

# Adjust plot margins
margin_adjustment <- theme(plot.margin = margin(5, 5, 5, 5, "pt"))
p1 <- p1 + margin_adjustment
p2 <- p2 + margin_adjustment

# Define a layout matrix to arrange the plots
# Here we arrange p1 on the left and p2 on the right in a single row
layout_matrix <- matrix(c(1, 2), nrow = 1)

# Use grid.arrange to display the plots side by side
grid.arrange(p1, p2, layout_matrix = layout_matrix, 
             top="Crime Count Distributions")
```

```{r}
#cross validation setup
set.seed(123)

split<-sample.split(df_daily$count,SplitRatio = 0.7)
train<-subset(df_daily,split==TRUE)
test<-subset(df_daily,split ==FALSE)
```

```{r}
#fitting the model 
model_pois <- glm(count ~ . , data = train, family = poisson)
model_forward <- step(model_pois, direction ="both")
summary(model_forward)
```

```{r}
#Testing the model, evaluation 
dispersiontest(model_forward)
```

```{r}
# Predicting the outputs
predictions <- predict(model_forward, newdata = test, type='response')

# Add predictions to the test dataset
test$predict <- predictions

# Display the first few rows of the test dataset with predictions
head(test)

# Summary of the model with exponentiated coefficients, confidence intervals, and p-values
exp_coef <- exp(coef(model_forward))
conf_int <- exp(confint(model_forward))
p_values <- summary(model_forward)$coefficients[, 4]

# Combine the exponentiated coefficients with their corresponding confidence intervals and p-values
results_summary <- cbind(exp_coef, conf_int, p_values)
```

```{r}
rmse(test$count, test$predict)
```

```{r}
#To calcualte the R2
rsq <- function (x, y) cor(x, y) ^ 2
rs <- rsq(test$count, test$predict)
rs
```

```{r}
summary(test$count)
```

```{r}
summary(test$predict)
```
